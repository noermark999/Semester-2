package bagopgave;import java.lang.reflect.Array;import java.util.Random;public class ArrayBag<T> implements Bag<T>{    private T[] bag = (T[]) new Object[10];    private int currentSize;    @Override    public int getCurrentSize()    {        return currentSize;    }    @Override    public boolean isFull()    {        return currentSize == bag.length;    }    @Override    public boolean isEmpty()    {        return currentSize == 0;    }    @Override    public boolean add(T newEntry)    {        if (!isFull()) {            bag[currentSize] = newEntry;            currentSize++;            return true;        }        return false;    }    @Override    public T remove()    {        int random = new Random().nextInt(currentSize);        T removed = bag[random];        bag[random] = null;        currentSize--;        return removed;    }    @Override    public boolean remove(T anEntry)    {        for (int i = 0; i < bag.length; i++) {            if (bag[i] == anEntry) {                bag[i] = null;                currentSize--;                return true;            }        }        return false;    }    @Override    public void clear()    {        for (int i = 0; i < bag.length; i++) {            bag[i] = null;        }        currentSize = 0;    }    @Override    public int getFrequencyOf(T anEntry)    {        int result = 0;        for (int i = 0; i < bag.length; i++) {            if (anEntry.equals(bag[i])) {                result++;            }        }        return result;    }    @Override    public boolean contains(T anEntry)    {        for (int i = 0; i < bag.length; i++) {            if (anEntry == bag[i]) {                return true;            }        }        return false;    }    @Override    public T[] toArray()    {        T[] newBag = (T[]) new Object[currentSize];        System.arraycopy(bag,0,newBag,0, currentSize);        return newBag;    }}